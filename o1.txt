



->allocation of space in struct is done through cycles.
-->right shift ---> x>>y =>x/2pow y
-->left shift-->x<<y =>x*(2**y)
-->tiled ~  -->it is like 1's compliment.
-->two numbers appeared once
// Online C++ compiler to run C++ program online
#include <iostream>
using namespace std;
int main() {
    int n;
    cin>>n;
    int a[n];
    
    for(int i=0;i<n;i++)
    {
        cin>>a[i];
    }
    int k=0;
    for(int i=0;i<n;i++)
    {
        k=k^a[i];
    }
    int c=0;
    while(1)
    {
        if((n>>c)&1)
        {
            break;
        }
        c+=1;
    }
    int b1=0;
    int b2=0;
    for(int i=0;i<n;i++)
    {
        if((a[i]>>c)&1)
        {
            b1=b1^a[i];
        }
        else
        {
            b2=b2^a[i];
        }
    }
    cout<<b1<<" "<<b2;
    return 0;
}


unique number 
----------
// Online C++ compiler to run C++ program online
#include <iostream>
using namespace std;
int main() {
   int n;
   cin>>n;
   int a[n];
   for(int i=0;i<n;i++)
   {
       cin>>a[i];
   }
   int res=0;
   for(int i=0;i<31;i++)
   {
       int c=0;
       for(int j=0;j<n;j++)
       {
           if((a[j]&(1<<i))>0) {c+=1;}
       }
       if(c%3!=0)
       {
           res=res|(1<<i);
       }
   }
    cout<<res<<" ";
    return 0;
}



AND BETWEEN L AND R
---------------------
#include <bits/stdc++.h>
using namespace std;
int main() {
    int n;
    cin>>n;
    int a[n];
    for(int i=0;i<n;i++)
    {
        cin>>a[i];
    }
    int b[n][32];
    for(int i=0;i<n;i++)
    {
        for(int j=32;j>=0;j--)
        {
            int m=((1<<j)&a[i]);
            if(m)
            {
                b[i][j]=1;
            }
            else
            {
                b[i][j]=0;
            }
        }
    }
    for(int i=1;i<n;i++)
    {
        for(int j=0;j<32;j++)
        {
            b[i][j]=b[i][j]+b[i-1][j];
        }
    }
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<32;j++)
        {
            cout<<b[i][j]<<" ";
        }
        cout<<"\n";
    }
    int l,r;
    cin>>l>>r;
    int s=r-l+1,ans=0;
    for(int j=0;j<32;j++)
    {
        if(l==0)
        {
            if(b[r][j]>=s)
            {
                ans=ans|(1<<j);
            }
        }
        else
        {
            if((b[r][j]-b[l-1][j])>=s)
            {
                ans=ans|(1<<j);
            }
        }
    }
    cout<<ans;
    return 0;
}





count possible ways to construct buildings
-----------------------------------------

long long a=1,b=2,c;
	    if(n==1)
	    {
	        return 4;
	    }
	    for(long long i=2;i<=n;i++)
	    {
	        c=(a+b)%1000000007;
	        a=b;
	        b=c;
	    }
	    return (c*c)%1000000007;
	    
	    
	}


longest increasing subsequence
--------------------------------
 int lengthOfLIS(vector<int>& nums) {
        vector<int>v;
        int n=nums.size(),k;
        v.push_back(nums[0]);
        for(int i=1;i<n;i++)
        {
            k=lower_bound(v.begin(),v.end(),nums[i])-v.begin();
            if(k>=v.size())
            {
                v.push_back(nums[i]);
            }
            else
            {
                v[k]=nums[i];
            }
        }
        return v.size();
    }

shortest path
-------------
#include<bits/stdc++.h>
using namespace std;

int main()
{
    long long n,a,b;
    cin>>n>>a>>b;
    int x=a^b;
    int k=__builtin_popcount(x);
    if(k%2==0)
    {
        cout<<(k/2)<<endl;
    }
    else
    {
        cout<<-1<<endl;
    }
}


Arithmetic Slices II - Subsequence
-------------------------------------
vector<unordered_map<long long int,long long int>>mpp(nums.size());
        long long cnt=0;
        for(long long i=0;i<nums.size();i++)
        {
            for(long long int j=0;j<i;j++)
            {
                long long cd=(long long)nums[i]-(long long)nums[j];
                long long c=mpp[j][cd];
                long long d=mpp[i][cd];
                cnt+=c;
                mpp[i][cd]=c+d+1;

                
            }
        }
        return cnt;
        
    }

find first and last index of an element in an array using binary search
---------------------------------------------------------------------

#include<bits/stdc++.h>
using namespace std;
int main()
{
    int n;
    cin>>n;
    int a[n];
    for(int i=0;i<n;i++)
    {
        cin>>a[i];
    }
    int k;
    cin>>k;
    int i=0,j=n-1,mid=0;
    vector<int>v;
    v.push_back(-1);
    v.push_back(-1);
    while(i<=j)
    {
        int mid=(i+j)/2;
        if(a[mid]==k)
        {
            int c=mid,d=mid;
            while(c>=0 and a[c]==k)
            {
                v[0]=c--;
            }
            while(d<=n and a[d]==k)
            {
                v[1]=d++;
            }
            break;
        }
        else
        {
             if(a[mid]>k)
            {
                j=mid-1;
            }
            else
            {
                i=mid+1;
            }
        }
    }
    cout<<v[0]<<" "<<v[1];
       
}
