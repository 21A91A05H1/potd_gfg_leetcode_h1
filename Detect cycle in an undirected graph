#include<bits/stdc++.h>
using namespace std;
int bfs(int node,vector<int>adj[],int n)
{
    vector<int>d(n+1,INT_MAX);
    vector<int>vis(n+1,0);
    int res=INT_MAX;
    queue<pair<int,int>>q;
    q.push({node,-1});
    vis[node]=1;
    while(!q.empty())
    {
        int node=q.front().first;
        int parent=q.front().second;
        for(auto it:adj[node])
        {
            if(!vis[it])
            {
                q.push({it,node});
                vis[it]=1;
                d[it]=d[node]+1;
            }
            else
            {
                if(it!=parent)
                {
                    res=min(res,d[node]+d[it]+1);
                }
            }
        }
    }
    return res;
}
int main()
{
    int n,m;
    cin>>n>>m;
    vector<int>adj[n+1];
    for(int i=0;i<m;i++)
    {
        int u,v;
        cin>>u>>v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    int LenghtofShortCycle = INT_MAX;
    for(int i = 0 ; i < n ; i++){
        LenghtofShortCycle = min(LenghtofShortCycle,bfs(i,adj,n));
    }
    if(LenghtofShortCycle == INT_MAX){
        cout<<-1<<endl;
    }
    else{
        cout<<LenghtofShortCycle<<endl;
    }
}








DFS 
---------------------

   bool dfs(int node,int parent,vector<int>adj[],vector<int>&vis)
    {
        vis[node]=1;
        for(auto it:adj[node])
        {
            if(!vis[it])
            {
                if(dfs(it,node,adj,vis)==1) return true;
            }
            else if(it!=parent) return true;
        }
    }
    bool isCycle(int V, vector<int> adj[]) {
        // Code here
        vector<int>vis(V,0);
        for(int i=0;i<V;i++)
        {
            if(!vis[i])
            {
                if(dfs(i,-1,adj,vis)==1)
                {
                    return true;
                }
            }
        }
        return false;
    }
};
